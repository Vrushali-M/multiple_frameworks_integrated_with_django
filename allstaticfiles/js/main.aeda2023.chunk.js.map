{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","todo_list","activeItem","id","title","completed","editing","fetchTasks","bind","handle_change","handle_submit","getCookie","delete_item","start_edit","strike_unstrike","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","this","console","log","fetch","then","response","json","data","setState","e","target","value","preventDefault","url","csrftoken","method","headers","body","JSON","stringify","catch","error","task","tasks","self","className","onSubmit","style","flex","onChange","type","placeholder","map","index","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.aeda2023.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n      this.state = {\n        todo_list:[],\n        activeItem:{\n          id: null, \n          title: '',\n          completed: false,\n\n        },\n        editing: false,\n      }\n      this.fetchTasks = this.fetchTasks.bind(this)\n      this.handle_change = this.handle_change.bind(this)\n      this.handle_submit = this.handle_submit.bind(this)\n      this.getCookie = this.getCookie.bind(this)\n      this.delete_item = this.delete_item.bind(this)\n      this.start_edit = this.start_edit.bind(this)\n      this.strike_unstrike = this.strike_unstrike.bind(this)\n      \n  };\n\n  getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n  componentWillMount(){\n    this.fetchTasks()\n  }\n  fetchTasks(){\n    console.log('Fetching...!')\n    fetch('http://localhost:8000/todo/')\n    .then(response => response.json())\n    .then(data => \n      this.setState(\n        {\n          todo_list: data\n        }\n      ))\n  }\n\n  handle_change(e){\n    var name= e.target.name\n    var value = e.target.value\n    console.log(name, value)\n\n    this.setState({\n      activeItem: {\n        ...this.state.activeItem, \n        title: value\n      }\n    })\n  }\n\n  handle_submit(e){\n    e.preventDefault()\n    console.log(this.state.activeItem)\n\n    var url = 'http://localhost:8000/todo/create/'\n\n    if (this.state.editing ==true){\n\n      var id = this.state.activeItem.id\n      var url = `http://localhost:8000/todo/update/${id}`\n      this.setState({\n        editing:false\n      })\n    }\n\n    var csrftoken = this.getCookie('csrftoken')\n\n    fetch(url, {\n      method : 'POST',\n      headers: {\n        'Content-Type':'application/json',\n        'X-CSRFToken': csrftoken, \n      },\n      body:JSON.stringify(this.state.activeItem)\n    }).then((response) => {\n      this.fetchTasks()\n      this.setState({\n        activeItem:{\n          id: null, \n          title: '',\n          completed: false,\n\n        }\n      })\n    }).catch(function (error) {\n      console.log(error)\n    })\n  }\n\n  start_edit(task){\n    this.setState({\n      activeItem:task,\n      editing:true,\n\n    })\n  }\n\n  delete_item(task){\n    var csrftoken = this.getCookie('csrftoken')\n\n    fetch(`http://localhost:8000/todo/delete/${task.id}`, {\n      method:'DELETE',\n      headers: {\n        'Content-Type': 'Application/json',\n        'X-CSRFToken': csrftoken, \n      },\n    }).then((response)=>{\n      this.fetchTasks()\n    })\n  }\n\n   strike_unstrike(task){\n     task.completed = !task.completed\n     var csrftoken = this.getCookie('csrftoken')\n     var url = `http://localhost:8000/todo/update/${task.id}`\n\n     fetch(url,{\n       method: 'POST',\n       headers: {\n        'Content-Type': 'Application/json',\n        'X-CSRFToken': csrftoken, \n       },\n       body: JSON.stringify({'completed':task.completed, 'title': task.title})\n     }).then(()=>{\n       this.fetchTasks()\n     } )\n   }\n  render(){\n\n    var tasks = this.state.todo_list\n    var self = this\n    return(\n      <div className=\"container\">\n        <div id = \"task_container\">\n          <div id = \"form_wrapper\">\n            <form onSubmit= {this.handle_submit} id = \"form\">\n              <div className = \"flex_wrapper\">\n                <div style = {{flex: 6}}>\n                  <input onChange= {this.handle_change} className= \"form_control\" id = \"title\" value = {this.state.activeItem.title} type = \"text\" name = \"title\" placeholder= \"Add Task\">\n                  </input> \n                </div>\n\n                <div style ={{flex:1}}>\n                  <input id = \"submit\" className = \"btn btn_warning\" type = \"submit\" name = \"add\"></input>\n\n                </div>\n              </div>\n            </form>\n\n          </div>\n\n          <div id = \"list_wrapper\">\n              {tasks.map(function (task, index) \n              {\n               return(\n                <div key = {index} className=\"task_wrapper flex_wrapper \">\n                  <div onClick={()=> self.strike_unstrike(task)} style= {{flex:7}}>\n                    {task.completed==false? (\n                        <span>{task.title}</span>\n                    ): (\n                        <strike>{task.title}</strike>\n                    )}\n                    \n                  </div>\n\n                  <div style= {{flex:1}}>\n                    <button onClick={()=> self.start_edit(task)} className=\"btn btn-sm btn-outline-info\">edit</button>\n                  </div>\n\n                  <div style= {{flex:1}}>\n                    <button onClick={()=> self.delete_item(task)} className=\"btn btn-sm btn-outline-dark delete\">-</button>\n                  </div>\n\n                </div>\n               ) \n              })}\n              \n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}